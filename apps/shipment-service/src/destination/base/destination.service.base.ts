/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Destination as PrismaDestination,
  Shipment as PrismaShipment,
} from "@prisma/client";

export class DestinationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DestinationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.destination.count(args);
  }

  async destinations(
    args: Prisma.DestinationFindManyArgs
  ): Promise<PrismaDestination[]> {
    return this.prisma.destination.findMany(args);
  }
  async destination(
    args: Prisma.DestinationFindUniqueArgs
  ): Promise<PrismaDestination | null> {
    return this.prisma.destination.findUnique(args);
  }
  async createDestination(
    args: Prisma.DestinationCreateArgs
  ): Promise<PrismaDestination> {
    return this.prisma.destination.create(args);
  }
  async updateDestination(
    args: Prisma.DestinationUpdateArgs
  ): Promise<PrismaDestination> {
    return this.prisma.destination.update(args);
  }
  async deleteDestination(
    args: Prisma.DestinationDeleteArgs
  ): Promise<PrismaDestination> {
    return this.prisma.destination.delete(args);
  }

  async findShipments(
    parentId: string,
    args: Prisma.ShipmentFindManyArgs
  ): Promise<PrismaShipment[]> {
    return this.prisma.destination
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shipments(args);
  }
}
