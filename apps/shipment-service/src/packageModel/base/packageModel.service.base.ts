/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PackageModel as PrismaPackageModel,
  Shipment as PrismaShipment,
} from "@prisma/client";

export class PackageModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PackageModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.packageModel.count(args);
  }

  async packageModels(
    args: Prisma.PackageModelFindManyArgs
  ): Promise<PrismaPackageModel[]> {
    return this.prisma.packageModel.findMany(args);
  }
  async packageModel(
    args: Prisma.PackageModelFindUniqueArgs
  ): Promise<PrismaPackageModel | null> {
    return this.prisma.packageModel.findUnique(args);
  }
  async createPackageModel(
    args: Prisma.PackageModelCreateArgs
  ): Promise<PrismaPackageModel> {
    return this.prisma.packageModel.create(args);
  }
  async updatePackageModel(
    args: Prisma.PackageModelUpdateArgs
  ): Promise<PrismaPackageModel> {
    return this.prisma.packageModel.update(args);
  }
  async deletePackageModel(
    args: Prisma.PackageModelDeleteArgs
  ): Promise<PrismaPackageModel> {
    return this.prisma.packageModel.delete(args);
  }

  async findShipments(
    parentId: string,
    args: Prisma.ShipmentFindManyArgs
  ): Promise<PrismaShipment[]> {
    return this.prisma.packageModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shipments(args);
  }
}
