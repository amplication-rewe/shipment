/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CarrierService } from "../carrier.service";
import { CarrierCreateInput } from "./CarrierCreateInput";
import { Carrier } from "./Carrier";
import { CarrierFindManyArgs } from "./CarrierFindManyArgs";
import { CarrierWhereUniqueInput } from "./CarrierWhereUniqueInput";
import { CarrierUpdateInput } from "./CarrierUpdateInput";
import { ShipmentFindManyArgs } from "../../shipment/base/ShipmentFindManyArgs";
import { Shipment } from "../../shipment/base/Shipment";
import { ShipmentWhereUniqueInput } from "../../shipment/base/ShipmentWhereUniqueInput";

export class CarrierControllerBase {
  constructor(protected readonly service: CarrierService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Carrier })
  async createCarrier(
    @common.Body() data: CarrierCreateInput
  ): Promise<Carrier> {
    return await this.service.createCarrier({
      data: data,
      select: {
        contactNumber: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Carrier] })
  @ApiNestedQuery(CarrierFindManyArgs)
  async carriers(@common.Req() request: Request): Promise<Carrier[]> {
    const args = plainToClass(CarrierFindManyArgs, request.query);
    return this.service.carriers({
      ...args,
      select: {
        contactNumber: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Carrier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async carrier(
    @common.Param() params: CarrierWhereUniqueInput
  ): Promise<Carrier | null> {
    const result = await this.service.carrier({
      where: params,
      select: {
        contactNumber: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Carrier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCarrier(
    @common.Param() params: CarrierWhereUniqueInput,
    @common.Body() data: CarrierUpdateInput
  ): Promise<Carrier | null> {
    try {
      return await this.service.updateCarrier({
        where: params,
        data: data,
        select: {
          contactNumber: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Carrier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCarrier(
    @common.Param() params: CarrierWhereUniqueInput
  ): Promise<Carrier | null> {
    try {
      return await this.service.deleteCarrier({
        where: params,
        select: {
          contactNumber: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/shipments")
  @ApiNestedQuery(ShipmentFindManyArgs)
  async findShipments(
    @common.Req() request: Request,
    @common.Param() params: CarrierWhereUniqueInput
  ): Promise<Shipment[]> {
    const query = plainToClass(ShipmentFindManyArgs, request.query);
    const results = await this.service.findShipments(params.id, {
      ...query,
      select: {
        carrier: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        destination: {
          select: {
            id: true,
          },
        },

        id: true,

        packageModel: {
          select: {
            id: true,
          },
        },

        shippingDate: true,
        status: true,
        trackingNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/shipments")
  async connectShipments(
    @common.Param() params: CarrierWhereUniqueInput,
    @common.Body() body: ShipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shipments: {
        connect: body,
      },
    };
    await this.service.updateCarrier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/shipments")
  async updateShipments(
    @common.Param() params: CarrierWhereUniqueInput,
    @common.Body() body: ShipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shipments: {
        set: body,
      },
    };
    await this.service.updateCarrier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/shipments")
  async disconnectShipments(
    @common.Param() params: CarrierWhereUniqueInput,
    @common.Body() body: ShipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shipments: {
        disconnect: body,
      },
    };
    await this.service.updateCarrier({
      where: params,
      data,
      select: { id: true },
    });
  }
}
