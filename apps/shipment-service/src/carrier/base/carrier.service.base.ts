/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Carrier as PrismaCarrier,
  Shipment as PrismaShipment,
} from "@prisma/client";

export class CarrierServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CarrierCountArgs, "select">): Promise<number> {
    return this.prisma.carrier.count(args);
  }

  async carriers(args: Prisma.CarrierFindManyArgs): Promise<PrismaCarrier[]> {
    return this.prisma.carrier.findMany(args);
  }
  async carrier(
    args: Prisma.CarrierFindUniqueArgs
  ): Promise<PrismaCarrier | null> {
    return this.prisma.carrier.findUnique(args);
  }
  async createCarrier(args: Prisma.CarrierCreateArgs): Promise<PrismaCarrier> {
    return this.prisma.carrier.create(args);
  }
  async updateCarrier(args: Prisma.CarrierUpdateArgs): Promise<PrismaCarrier> {
    return this.prisma.carrier.update(args);
  }
  async deleteCarrier(args: Prisma.CarrierDeleteArgs): Promise<PrismaCarrier> {
    return this.prisma.carrier.delete(args);
  }

  async findShipments(
    parentId: string,
    args: Prisma.ShipmentFindManyArgs
  ): Promise<PrismaShipment[]> {
    return this.prisma.carrier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shipments(args);
  }
}
