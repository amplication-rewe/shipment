/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Carrier } from "./Carrier";
import { CarrierCountArgs } from "./CarrierCountArgs";
import { CarrierFindManyArgs } from "./CarrierFindManyArgs";
import { CarrierFindUniqueArgs } from "./CarrierFindUniqueArgs";
import { CreateCarrierArgs } from "./CreateCarrierArgs";
import { UpdateCarrierArgs } from "./UpdateCarrierArgs";
import { DeleteCarrierArgs } from "./DeleteCarrierArgs";
import { ShipmentFindManyArgs } from "../../shipment/base/ShipmentFindManyArgs";
import { Shipment } from "../../shipment/base/Shipment";
import { CarrierService } from "../carrier.service";
@graphql.Resolver(() => Carrier)
export class CarrierResolverBase {
  constructor(protected readonly service: CarrierService) {}

  async _carriersMeta(
    @graphql.Args() args: CarrierCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Carrier])
  async carriers(
    @graphql.Args() args: CarrierFindManyArgs
  ): Promise<Carrier[]> {
    return this.service.carriers(args);
  }

  @graphql.Query(() => Carrier, { nullable: true })
  async carrier(
    @graphql.Args() args: CarrierFindUniqueArgs
  ): Promise<Carrier | null> {
    const result = await this.service.carrier(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Carrier)
  async createCarrier(
    @graphql.Args() args: CreateCarrierArgs
  ): Promise<Carrier> {
    return await this.service.createCarrier({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Carrier)
  async updateCarrier(
    @graphql.Args() args: UpdateCarrierArgs
  ): Promise<Carrier | null> {
    try {
      return await this.service.updateCarrier({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Carrier)
  async deleteCarrier(
    @graphql.Args() args: DeleteCarrierArgs
  ): Promise<Carrier | null> {
    try {
      return await this.service.deleteCarrier(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Shipment], { name: "shipments" })
  async findShipments(
    @graphql.Parent() parent: Carrier,
    @graphql.Args() args: ShipmentFindManyArgs
  ): Promise<Shipment[]> {
    const results = await this.service.findShipments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
